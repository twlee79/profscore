Sequence analysis of neuroserpin orthologues
============================================

.. contents::
.. footer:: Tet Woo Lee 2014-04

General information
-------------------

The input alignment ``example/neuroserpin/all sequences + A1AT.fasta`` contains a multiple sequence alignment of 57 sequences: 16 antithrombin, 11 neuroserpin, 11 GDN, 8 pancpin, 10 PAI-1 and human alpha-1-antitrypsin. In the following example, conservation scores and consensus residues are calculated for the 11 neuroserpin sequences and compared to the GDN, pancpin and PAI-1 sequences. Antithrombin is not used in this analysis and human alpha-1-antitrypsin is used to generate the residue numbering to compare to the results from `Irving et al., 2000`_ only. However, the full alignment can be used in all steps as the script provides options to select a subset of sequences when performing analyses. 

.. _`Irving et al., 2000`: http://www.ncbi.nlm.nih.gov/pubmed/11116082

By default, the script will calculate profile-based conservation scores using the `Valdar and Thornton, 2001`_ matrix, which is a transformed PET91 matrix in the range of [0.0-1.0] with a constant diagonal (see also `Valdar, 2002`_). Gaps are given the score 0.0.

.. _`Valdar and Thornton, 2001`: http://www.ncbi.nlm.nih.gov/pubmed/11093265
.. _`Valdar, 2002`: http://www.ncbi.nlm.nih.gov/pubmed/12112692

Example reports produced as output for each of these steps are provided together with this file. Note that the *p*-values generated by (re)running the commands here will not be identical to the example files as these are generated by randomization.

Determining of conservation scores, consensus residues and *p*-values for neuroserpin sequences
-----------------------------------------------------------------------------------------------

Command: 

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" -s "NS_" -c 0.7 --rndsubset "(NS|GDN|PP|PAI1)_" -n 10000 -p "example/neuroserpin/rand10000_for_ns.csv" -r NS_HOMO --outsubset "(NS|GDN|PP|PAI1)_" -o "example/neuroserpin/profscore_ns.csv"``

Using the full multiple sequence alignment (``example/neuroserpin/all sequences + A1AT.fasta``), the profile-based conservation score (default) is used to calculate conservation scores for neuroserpin sequences (selected with ``-s "NS_"``) with consensus residues determined to be those with consensus scores of ≥ 0.7 in the sequence profile (``-c 0.7``). To determine *p*-values, conservation scores are calculated for a random sample of 11 sequences (the same number as neuroserpin sequences selected) from the alignment of neuroserpin, GDN, pancpin and PAI-1 sequences (selected with ``--rndsubset "(NS|GDN|PP|PAI1)_"``) and this is repeated 10,000 times (``-n 10000``); at each site, the *p*-value is calculated as the proportion of randomizations giving conservation scores at least as high as in the neuroserpin sequences. Results of the randomizations must be saved to file during processing, and the file ``example/neuroserpin/rand10000_for_ns.csv`` (``-p "example/neuroserpin/rand10000_for_ns.csv"``) is used for this. To produce a report, human neuroserpin is used as the reference sequence for numbering (``-r NS_HOMO``) and neuroserpin, GDN, pancpin and PAI1 sequences (``--outsubset "(NS|GDN|PP|PAI1)_"``) are added to the report for reference. The output report is saved to the file ``example/neuroserpin/profscore_ns.csv`` (``-o "example/neuroserpin/profscore_ns.csv"``). This report contains selected sequences, conservation scores, consensus residues and *p*-values at each site in neuroserpin.


Determining of consensus residues of non-neuroserpin sequences
--------------------------------------------------------------

Command:

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" -s "(GDN|PP|PAI1)_" -c 0.7 --outsubset "(NS|GDN|PP|PAI1)_" -r NS_HOMO -o "example/neuroserpin/profscore_gdn+pp+pai_nsnum.csv"``

Using the full multiple sequence alignment (``example/neuroserpin/all sequences + A1AT.fasta``), the profile-based conservation score (default) is used to calculate conservation scores for relevant non-neuroserpin sequences (selected with ``-s "(GDN|PP|PAI1)_"``) with consensus residues determined to be those with consensus scores of ≥ 0.7 in the sequence profile (``-c 0.7``). A report is produced with neuroserpin sequences as well, human neuroserpin for numbering (``-r NS_HOMO --outsubset "(NS|GDN|PP|PAI1)_"``) and written to the file ``example/neuroserpin/profscore_gdn+pp+pai_nsnum.csv`` (``-o "example/neuroserpin/profscore_gdn+pp+pai_nsnum.csv"``). As this report has the same numbering as the file generated above for neuroserpin, the columns from the report that give the consensus residues for non-neuroserpin sequences can be copied to the first report and compared with those from neuroserpin.


Generating a comparison of alpha-1-antitrypsin numbering to neuroserpin numbering
---------------------------------------------------------------------------------

First:

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" --outpos ALL -r A1AT_HUMAN --numstart "-24" -o "example/neuroserpin/profscore_all_a1atnum.csv"``
  
Using the full multiple sequence alignment (``example/neuroserpin/all sequences + A1AT.fasta``), produce a report with all positions in the alignment (``--outpos ALL``), alpha-1-antitrypsin as the reference sequence for numbering (``-r A1AT_HUMAN``) and numbering starting from -24 to account for the signal peptide (``--numstart "-24"``), writing to the file ``example/neuroserpin/profscore_all_a1atnum.csv`` (``-o "example/neuroserpin/profscore_all_a1atnum.csv"``). This produces a report with numbering in the "report num" column according to human alpha-1-antitrypsin, with residue 1 starting from the first amino acid in the mature (non-pre) protein, as used in `Irving et al., 2000`_. 

Second:

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" --outpos ALL -r NS_HOMO -o "example/neuroserpin/profscore_all_nsnum.csv"``

Produce a similar report but with numbering using human neuroserpin as the reference sequence for numbering (``-r NS_HOMO``). This produces a report with numbering in the "report num" column according to human neuroserpin, with residue 1 being the first residue in the neuroserpin precursor (including the signal peptide), the same numbering scheme used in previous steps above.

The "report num" column from the two files can then be compared to show human neuroserpin numbering versus alpha-1-antitrypsin numbering.

More options when performing randomizations
-------------------------------------------

It is possible to generate a randomizations file for later use without generating a report:

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" -s "NS_" --rndsubset "(NS|GDN|PP|PAI1)_" -n 5000 -p "example/neuroserpin/rand5000_for_ns.csv" -r NS_HOMO``

Or to use a previously generated randomizations file to add *p*-values to a report (``-i "example/neuroserpin/rand10000_for_ns.csv"``). In this case, it is necessary to select the same randomization subset used to generate the randomizations file (``--rndsubset "(NS|GDN|PP|PAI1)_"``) so that the script can ensure that the selected randomizations file is suitable:

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" -s "NS_" -c 0.7 --rndsubset "(NS|GDN|PP|PAI1)_" -i "example/neuroserpin/rand10000_for_ns.csv" -r NS_HOMO --outsubset "(NS|GDN|PP|PAI1)_" -o "example/neuroserpin/profscore_ns_test.csv"``
  
It is also possible to read and combine multiple randomizations files (``-i "example/neuroserpin/rand5000_for_ns.csv" "example/neuroserpin/rand10000_for_ns.csv"``):

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" -s "NS_" --rndsubset "(NS|GDN|PP|PAI1)_" -i "example/neuroserpin/rand5000_for_ns.csv" "example/neuroserpin/rand10000_for_ns.csv" -p "example/neuroserpin/rand15000_for_ns.csv" -r NS_HOMO``
  
Or to add additional randomizations (``-n 5000``) to an existing randomizations file (``-i "example/neuroserpin/rand15000_for_ns.csv"``) to produce a new randomizations file:

  ``profscore.py "example/neuroserpin/all sequences + A1AT.fasta" -s "NS_" --rndsubset "(NS|GDN|PP|PAI1)_" -i "example/neuroserpin/rand15000_for_ns.csv" -n 5000 -p "example/neuroserpin/rand20000_for_ns.csv" -r NS_HOMO``

Other scoring options
---------------------

Valdar (`Valdar and Thornton, 2001`_; ``-t VALDAR``) and uncorrected profile-based conservation scores (not corrected for self-self comparisons; ``-t PROFILE_UNCORR``) can also be calculated. The default (corrected) profile-based scores (``-t PROFILE``) are identical to Valdar scores but also provide the means to determine consensus residues. As a comparison, the file ``example/neuroserpin/scorecons_ns_nsnum.csv`` gives the Valdar sequence conservation scores calculated using the |scorecons server|_ (``valdar01`` method, ``modified PET91`` matrix, gaps ``0``) with the same numbering as in ``example/neuroserpin/profscore_ns.csv``. These are identical to the profile-based and Valdar conservation scores calculated with the ``profscore.py`` script within the precision of the *scorecons* output (0.001).

.. _scorecons server: https://www.ebi.ac.uk/thornton-srv/databases/cgi-bin/valdar/scorecons_server.pl
.. |scorecons server| replace:: *scorecons* server

Alternative substitution matrices in *aaindex2* format can be used (e.g. ``-m BLOSUM62``). The diagonal elements will be calculated as the rounded average of the diagonal elements in the unmodified matrix (by default) or with set diagonal score (e.g. ``--diagonal 10``). The substitution matrix will then be linear transformed to the range [0.0-1.0].

The gap score (gap to amino acid; e.g. --gap 0.1) and gap-gap (gap to gap; e.g. ``--gapgap 0.0``) can be set.

By default, sequences are weighted by evolutionary distance. This can be changed to uniform weighting (``--uniform``).

Calculation of solvent-accessible surface area
----------------------------------------------

In PyMol, open PDB file ``3FGQ`` (downloaded from the PDB_ database) and use the ``pymol_calc_accessibility.py`` script by running these commands (``<script path>`` should be replaced by the path containing the script file on the local file system)::

  remove not chain a
    # delete all except chain a (first chain)
  set_name 3FGQ, 3FGQ-a
    # rename object to 3FGQ-a to include chain name
  cd <script path>
    # change directory to script location
  run pymol_calc_accessibility.py
    # install script
  calc_accessibility_all(dot_solvent = 1, dot_density = 4)
    # run script

.. _PDB: http://www.rcsb.org/

This will calculate the solvent-accessible surface area for each residue in the object ``3FGQ-a`` and write these data to the file ``3FGQ-a_accessibility.csv`` in the current directory (script path if above commands used). The surface area for a residue is calculated for all atoms and for side-chain atoms only; side-chain atoms exclude the main-chain carbonyl and amino atoms for all amino acids and exclude the alpha carbon for all amino acids except glycine. The data file contains the following data columns:

===========    ======================================
column         description
===========    ======================================
``model``      pymol object name
``resi``       residue identifier (number)
``resn``       residue name
``sc_acc``     surface area of side-chain atoms in Å²
``all_acc``    surface area of all atoms in Å²
===========    ======================================

The residue numbering of the PDB file is identical to that used in ``example/neuroserpin/profscore_ns.csv`` so the solvent-accessible surface area for each residue can be combined with the conservation data.

